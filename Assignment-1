QUES 1 :-

 Write a Python program that takes a list of daily stock prices as input, and returns the best days to buy and sell stocks in order to maximize profit. The list contains the stock prices for each day, starting from the first day. 
For example, the list (100, 180, 260, 310, 40, 535, 695) represents the stock prices for 7 days, where the price on the first day is 100, the second day is 180, and so on. The program should find the best days to buy and sell stocks such that the profit obtained is maximum. For instance, in the given list of stock prices, the best days to buy and sell stocks would be: 
Buy stock on the 1st day (price=100) 
Sell stock on the 4th day (price=310) 
Buy stock on the 5th day (price=40) 
Sell stock on the 7th day (price=695) 
The program should output these buy and sell days as a tuple or list of integers. Give me solution of this program?

ANS :-
The cost of a stock on each day is given in an array, find the max profit that you can make by buying and selling in those days. For example, if the given array is {100, 180, 260, 310, 40, 535, 695}, the maximum profit can earned by buying on day 0, selling on day 3. Again buy on day 4 and sell on day 6. If the given array of prices is sorted in decreasing order, then profit cannot be earned at all.
A simple approach is to try buying the stocks and selling them on every single day when profitable and keep updating the maximum profit so far.

Below is the implementation of the above approach:
Program :-

# Python3 implementation of the approach
# Function to return the maximum profit
# that can be made after buying and
# selling the given stocks
def maxProfit(price, start, end):
# If the stocks can't be bought
 	if (end <= start):
     		return 0;

# Initialise the profit
profit = 0;

# The day at which the stock
# must be bought
for i in range(start, end, 1):
# The day at which the
# stock must be sold
for j in range(i+1, end+1):

# If buying the stock at ith day and
# selling it at jth day is profitable
 if (price[j] > price[i]):
 # Update the current profit
curr_profit = price[j] - price[i] + maxProfit(price, start, i - 1)+
maxProfit(price,  j + 1, end);
# Update the maximum profit so far
 		profit = max(profit, curr_profit);
 return profit;
# Driver code
if __name__ == '__main__':
price = [100, 180, 260,310, 40, 535, 695];
n = len(price);
    	print(maxProfit(price, 0, n - 1));
OUTPUT:-
865
QUES 2 :- 

Write a Python function earliest_trilogy_year(titles: List[str], years: List[int]) ->Optional[int] that takes two lists as input: titles containing the titles of the books, and years containing their corresponding publication years. The function should return the earliest year in which a trilogy of books was published, or None if no such trilogy exists.
Examples:
titles = ['Book1', 'Book2', 'Book3', 'Book4', 'Book5', 'Book6']
years = [2019, 2021, 2012, 2013, 2016, 2017]
print(earliest_trilogy_year(titles, years))
The earliest year in which a trilogy was published is : None
A trilogy is defined as a series of three books published in consecutive years.

ANS:-

PROGRAM:-

from typing import List, Optional

def earliest_trilogy_year(titles: List[str], years: List[int]) -> Optional[int]:
    """
    Returns the earliest year in which a trilogy of books was published, or None if no such trilogy exists.

    Args:
    titles (List[str]): A list of book titles.
    years (List[int]): A list of corresponding publication years.

    Returns:
    Optional[int]: The earliest year in which a trilogy of books was published, or None if no such trilogy exists.
    """
    if len(years) < 3:
        return None

    for i in range(len(years)-2):
        if years[i+2] == years[i+1]+1 == years[i]+2:
            return years[i]

    return None

We start by checking if the number of books is less than 3, in which case there can be no trilogy. We then loop through the list of years from the first year to the third-to-last year, checking if the current year and the two subsequent years form a trilogy. If a trilogy is found, we return the earliest year of the trilogy. If no trilogy is found, we return None.

Here's how you can use this function:

titles = ['Book1', 'Book2', 'Book3', 'Book4', 'Book5', 'Book6']
years = [2019, 2021, 2012, 2013, 2016, 2017]
print(earliest_trilogy_year(titles, years))
# Output: None

titles = ['Book1', 'Book2', 'Book3', 'Book4', 'Book5', 'Book6']
years = [2019, 2021, 2012, 2013, 2014, 2015]
print(earliest_trilogy_year(titles, years))

OUTPUT:- 2012




QUES 3 :-	
Write a Python program that reads in a CSV file of stock prices (e.g. ticker symbol, date,price), and then uses dictionaries and lists to calculate the highest and lowest prices for each
Stock from following table:-

Symbol                                             Date                                           Price
AAPL   	2022-01-01	135.90
AAPL  	2022-01-02	138.45
AAPL  	2022-01-03	142.20
GOOG  	2022-01-01	2105.75
GOOG  	2022-01-02	2098.00
GOOG  	2022-01-03	2125.50
MSFT   	2022-01-01	345.20
MSFT  	2022-01-02	344.70
MSFT   	2022-01-03	342.10

ANS:-
To read in the CSV file and calculate the highest and lowest prices for each stock, we can use Python's built-in csv module and create dictionaries for each stock symbol. Each dictionary will store the highest and lowest prices for that symbol.

PROGRAM :-

import csv
# Initialize an empty dictionary for each stock symbol
symbols = {}

# Open the CSV file and read in the data
with open('stock_prices.csv') as csv_file:
    csv_reader = csv.reader(csv_file)
    next(csv_reader) # skip header row
    
    # Loop through each row of data
for row in csv_reader:
        symbol, date, price = row
        
        # If the symbol isn't already in the dictionary, add it
        if symbol not in symbols:
            symbols[symbol] = {'highest': float(price), 'lowest': float(price)}
        else:
            # If the price is higher than the current highest, update the dictionary
            if float(price) > symbols[symbol]['highest']:
                symbols[symbol]['highest'] = float(price)
            
            # If the price is lower than the current lowest, update the dictionary
            if float(price) < symbols[symbol]['lowest']:
                symbols[symbol]['lowest'] = float(price)
                
# Print out the results
for symbol, data in symbols.items():
    print(symbol)
    print('Highest price:', data['highest'])
    print('Lowest price:', data['lowest'])
    print('')

OUTPUT:-

AAPL
Highest price: 142.2
Lowest price: 135.9

GOOG
Highest price: 2125.5
Lowest price: 2098.0
MSFT
Highest price: 345.2
Lowest price: 342.1

QUES 4:-
 
A)	Write a Python program to remove duplicates from a list of lists.
Sample list: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]] ?

ANS :-

PROGRAM :-
def Remove(duplicate):
    final_list = []
    for num in duplicate:
        if num not in final_list:
            final_list.append(num)
    return final_list
     
# Driver Code
duplicate = [[10,20],[40],[30,56,25],[10,20],[33],[40]]
print(Remove(duplicate))

OUTPUT :-
[[10, 20], [40], [30, 56, 25], [33]]

B)	Write a Python program which takes a list and returns a list with the elements "shifted left by one position" so [1, 2, 3] yields [2, 3, 1] ?
Example: [1, 2, 3] → [2, 3, 1]
[11, 12, 13] → [12, 13, 11]
ANS:-
In this program, we define a function called shift_left which takes a list as its argument. The function uses list slicing to create a new list that has all the elements of the original list, except for the first element, followed by the first element. The resulting list is then returned.

We can then call this function with an example list [1, 2, 3] and print the resulting list which will be [2, 3, 1]. 

 PROGRAM:-

def shift_left(lst):
    """
    Shifts the elements of a list left by one position
    """
    return lst[1:] + [lst[0]]

# example usage
original_list = [1, 2, 3]
shifted_list = shift_left(original_list)
print(shifted_list)

OUTPUT:-
[2, 3, 1]

C)	 Iterate a given list and count the occurrence of each element and create dictionary to show the count of each element.
Original list [11, 45, 8, 11, 23, 45, 23, 45, 89, 11, 89]
And expected output is:
Printing count of each item {11: 3, 45: 3, 8: 1, 23: 2, 89: 2}

ANS:-

PORGRAM:-
sample_list = [11, 45, 8, 11, 23, 45, 23, 45, 89,11,89]
print("Original list ", sample_list)

count_dict = dict()
for item in sample_list:
    if item in count_dict:
        count_dict[item] += 1
    else:
        count_dict[item] = 1
print("Printing count of each item  ", count_dict)

OUTPUT:-
Original list  [11, 45, 8, 11, 23, 45, 23, 45, 89, 11, 89]
Printing count of each item   {11: 3, 45: 3, 8: 1, 23: 2, 89: 2}
